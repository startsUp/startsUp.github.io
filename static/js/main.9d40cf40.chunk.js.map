{"version":3,"sources":["threeJS/SceneManager.ts","threeJS/Wave.ts","threeJS/WaveScene.ts","threeJS/main.js","components/canvas.js","theme.js","App.js","serviceWorker.js","index.js"],"names":["SceneManager","canvas","scene","clock","camera","renderer","loader","sceneSubjects","controls","buildScene","THREE","ambientLight","add","directionalLight","position","set","normalize","getScene","getCamera","buildRender","width","height","antialias","alpha","DPR","window","devicePixelRatio","setPixelRatio","buildCamera","aspectRatio","lookAt","getModelLoader","GLTFLoader","update","elapsedTime","getElapsedTime","i","length","render","addSubject","subject","getSubject","push","onWindowResize","updateProjectionMatrix","setSize","innerWidth","this","console","warn","screenMetaData","buildController","OrbitControls","domElement","Wave","sceneManager","wave","rotation","speed","count","rotateOnWorldAxis","positions","geometry","attributes","k","j","u","v","x","y","Math","cos","PI","sin","z","setXYZ","needsUpdate","pcBuffer","generatePointcloud","scale","color","numPoints","Float32Array","colors","intensity","r","g","b","setAttribute","computeBoundingBox","generatePointCloudGeometry","material","size","WaveScene","containerElement","document","createElement","appendChild","createCanvas","setFromNormalAndCoplanarPoint","resizeCanvas","style","addEventListener","time","requestAnimationFrame","CanvasScene","threeContainer","useEffect","mainScene","id","ref","element","getTheme","type","createMuiTheme","palette","background","default","textGradient","typography","fontFamily","join","h1","fontWeight","h5","body1","body2","fontSize","useStyles","makeStyles","theme","rootCont","breakpoints","down","paddingLeft","paddingRight","lowkey","right","top","gradientText","WebkitBackgroundClip","WebkitTextFillColor","title","textAlign","box","maxHeight","overflow","icons","paddingTop","display","gridTemplateColumns","gridGap","spacing","gap","titleContainer","padding","image","backgroundImage","backgroundRepeat","backgroundSize","backgroundPosition","paper","margin","flexDirection","alignItems","link","titleBar","justifyItems","workTitle","iconCont","Title","classes","Box","className","Typography","variant","Divider","IconButton","href","target","WorkOutline","focusable","viewBox","aria-hidden","d","LinkedIn","AlternateEmailOutlined","Main","Container","Boolean","location","hostname","match","ReactDOM","props","prefersDarkMode","useMediaQuery","React","useMemo","ThemeProvider","CssBaseline","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9d40cf40.chunk.js","sourcesContent":["import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport * as THREE from 'three'\n// import { Cube } from './cube.ts'\n// import { Portal } from './portal.ts'\n// import cubeModel from '../models/cube.glb'\n// import bluePortal from '../models/portal-blue.glb'\n// import orangePortal from '../models/portal-orange.glb' \nimport SceneSubject from './SceneSubject';\n\nexport default class SceneManager {\n\n    private canvas: any;\n    private scene: THREE.Scene;\n    private clock: THREE.Clock;\n    private camera: THREE.PerspectiveCamera;\n    private renderer: THREE.Renderer;\n    private loader: GLTFLoader;\n    private sceneSubjects: SceneSubject[];\n    private controls: any;\n\n    constructor(canvas: any){\n        this.clock = new THREE.Clock();\n        this.canvas = canvas;\n\n        console.warn('Canvas deets', canvas)\n        const screenMetaData = {\n            width: 1000,\n            height: 300,\n            canvas: canvas\n        }\n        \n        this.scene = this.buildScene();\n        this.renderer = this.buildRender(screenMetaData);\n        this.camera = this.buildCamera(screenMetaData);\n        this.loader = this.getModelLoader();\n        this.controls = this.buildController(this.camera, this.renderer)\n        this.sceneSubjects = [];\n    }\n\n    buildController(camera: THREE.PerspectiveCamera, renderer: THREE.Renderer): any {\n        this.controls = new OrbitControls( camera, renderer.domElement );\n    }\n    \n   // const sceneSubjects = createSceneSubjects(scene, loader);\n\n    buildScene = () => {\n        const scene = new THREE.Scene();\n        var ambientLight = new THREE.AmbientLight( 0xcccccc );\n        scene.add( ambientLight );\n                    \n        var directionalLight = new THREE.DirectionalLight( 0xffffff, 0.8);\n        directionalLight.position.set( 0, 4, 11 ).normalize();\n        scene.add( directionalLight );\t\n\n        return scene;\n    }\n\n    getScene = () => {\n        return this.scene;\n    }\n    getCamera = () => {\n        return this.camera;\n    }\n\n    buildRender = ({ width, height, canvas }) => {\n        const renderer = new THREE.WebGLRenderer({ canvas: canvas, antialias: true, alpha: true }); \n        const DPR = (window.devicePixelRatio) ? window.devicePixelRatio : 1;\n        renderer.setPixelRatio(DPR);\n        // renderer.setSize(width, height);\n\n        // renderer.outputEncoding = THREE.sRGBEncoding;\n\n        return renderer;\n    }\n\n    buildCamera = ({ width, height }) => {\n        const aspectRatio = width / height;\n        const fieldOfView = 20;\n        const nearPlane = 1;\n        const farPlane = 1000; \n        const camera = new THREE.PerspectiveCamera(fieldOfView, aspectRatio, nearPlane, farPlane);\n        camera.position.set( 0 , 4 , 11);\n        camera.lookAt(new THREE.Vector3(0,0,0));\n        \n    \n        return camera;\n    }\n\n    // createSceneSubjects = (scene, loader) => {\n    //     // TODO: Export this function so main controller can control the initial load\n    //     const sceneSubjects = [\n    //         new Cube(scene, loader, cubeModel),\n    //         new Portal(scene, loader, bluePortal, {\n    //             scale: new THREE.Vector3(0.5,0.5,0.5),\n    //             position: new THREE.Vector3(-15, 0, 0),\n    //             rotation: new THREE.Vector3(0, Math.PI/1.5, 0),\n    //         }),\n    //         new Portal(scene, loader, orangePortal, {\n    //             scale: new THREE.Vector3(0.5,0.5,0.5),\n    //             position: new THREE.Vector3(15, 0, 0),\n    //             rotation: new THREE.Vector3(0, -Math.PI/1.5,0),\n    //         })\n    //     ];\n\n    //     return sceneSubjects;\n    // }\n    \n    getModelLoader = () => {\n        return new GLTFLoader();\n    }\n\n    update = () => {\n        if (this.controls){\n            this.controls.update();\n        }\n        const elapsedTime = this.clock.getElapsedTime();\n        if(this.sceneSubjects){\n            for(let i=0; i<this.sceneSubjects.length; i++)\n        \tthis.sceneSubjects[i].update(elapsedTime);\n\n            this.renderer.render(this.scene, this.camera);\n        }\n        \n    }\n\n    addSubject= (subject: SceneSubject) => {\n        this.scene.add(subject.getSubject());\n        this.sceneSubjects.push(subject)\n    }\n\n    onWindowResize = () => {\n        // const { width, height } = this.renderer.domElement;\n        // const canvas = renderer.domElement;\n        // camera.aspect = canvas.clientWidth / canvas.clientHeight;\n        // camera.updateProjectionMatrix();\n\n        // this.camera.aspect = window.innerWidth / window.innerHeight;\n        this.camera.updateProjectionMatrix();\n        \n        this.renderer.setSize(window.innerWidth , 200);\n    }\n}","import  SceneSubject  from './SceneSubject'\nimport * as THREE from 'three'\nimport SceneManager from './SceneManager';\nimport { BufferGeometry } from 'three';\n\nexport class Wave implements SceneSubject{\n    public wave: THREE.Points;\n    public rotation: THREE.Vector3;\n    public speed: THREE.Vector3;\n    public width: number\n    public height: number \n\n    private count: number = 0\n    generatePointCloudGeometry( color, width, length ) {\n\n      const geometry = new THREE.BufferGeometry();\n      const numPoints = width * length;\n\n      const positions = new Float32Array( numPoints * 3 );\n      const colors = new Float32Array( numPoints * 3 );\n\n      let k = 0;\n\n      for ( let i = 0; i < width; i ++ ) {\n\n        for ( let j = 0; j < length; j ++ ) {\n\n          const u = i / width;\n          const v = j / length;\n          const x = u - 0.5;\n          const y = ( Math.cos( u * Math.PI * 4 ) + Math.sin( v * Math.PI * 8 ) ) / 20;\n          const z = v - 0.5;\n\n          positions[ 3 * k ] = x;\n          positions[ 3 * k + 1 ] = y;\n          positions[ 3 * k + 2 ] = z;\n\n          const intensity = ( y + 0.1 ) * 5;\n          colors[ 3 * k ] = color.r * intensity;\n          colors[ 3 * k + 1 ] = color.g * intensity;\n          colors[ 3 * k + 2 ] = color.b * intensity;\n\n          k ++;\n\n        }\n\n      }\n\n      geometry.setAttribute('position', new THREE.BufferAttribute( positions, 3 ) );\n      geometry.attributes.position.needsUpdate = true;\n      geometry.setAttribute( 'color', new THREE.BufferAttribute( colors, 3 ) );\n      geometry.computeBoundingBox();\n\n      return geometry;\n    }\n\n    generatePointcloud( color, width, length ) {\n      const threshold = 0.1;\n\t\t\tconst pointSize = 0.08;\n      const geometry = this.generatePointCloudGeometry( color, width, length );\n      const material = new THREE.PointsMaterial( { size: pointSize, color: 0xff44ff } );\n    \n      return new THREE.Points( geometry, material );\n\n    }\n\n    constructor(private sceneManager: SceneManager){\n      const scene = sceneManager.getScene()\n      this.width = 80;\n      this.height = 160;\n\n      const pcBuffer = this.generatePointcloud( new THREE.Color( 107, 0, 168 ), this.width, this.height );\n      pcBuffer.scale.set( 10, 5, 10);\n      pcBuffer.position.set( 0, 0, 0);\n      pcBuffer.rotateOnWorldAxis(new THREE.Vector3(0,1,0), Math.PI/4);\n      pcBuffer.rotateOnWorldAxis(new THREE.Vector3(1,0,0), -Math.PI/10);\n      // pcBuffer.rotateOnAxis()\n      // pcBuffer.\n      // pcBuffer.rotateOnWorldAxis(new THREE.Vector3(1,0,0), -Math.PI/7);\n      // pcBuffer.rotateOnWorldAxis(new THREE.Vector3(0, 0,1), Math.PI/6);\n      // pcBuffer.rotateOnWorldAxis(new THREE.Vector3(0,1,0), 20);\n      this.wave = pcBuffer\n\n      sceneManager.addSubject( this )\n\n    }\n\n    getSubject(): THREE.Object3D {\n      return this.wave\n    }\n\n    update = () => {\n      // update point cloud wave\n      this.wave.rotateOnWorldAxis(new THREE.Vector3(0,1,0), 0.00001);\n      var geometry = this.wave.geometry as BufferGeometry\n      var positions = geometry.attributes.position\n      // var colors = geometry.attributes\n      const width = this.width\n      const length = this.height\n      let k = 0;\n      for ( let i = 0; i < width; i ++ ) {\n\n        for ( let j = 0; j < length; j ++ ) {\n\n          const u = i / width;\n          const v = j / length;\n          const x = u - 0.5;\n          const y = ( Math.cos( ((u - this.count)*0.3) * Math.PI * 4 ) + Math.sin(((v + this.count)*0.3) * Math.PI * 8 ) ) / 20;\n          // const y = ( Math.cos( u * Math.PI * 4 ) + Math.sin( v * Math.PI * 8 ) ) / 20;\n\n          const z = v - 0.5;\n\n          positions.setXYZ(k, x, y, z)\n          // positions.setX(3 * k, x)\n          // positions.setY(3 * k + 1, y)\n          // positions.setZ(3 * k + 2, z)\n          // positions.setXYZ(3 * k + 1, x, y, z)\n          // positions.setXYZ(3 * k + 2, x, y, z)\n          // positions[ 3 * k ] = x;\n          // positions[ 3 * k + 1 ] = y;\n          // positions[ 3 * k + 2 ] = z;\n\n          // const intensity = ( y + 0.1 ) * 5;\n          // colors[ 3 * k ] = color.r * intensity;\n          // colors[ 3 * k + 1 ] = color.g * intensity;\n          // colors[ 3 * k + 2 ] = color.b * intensity;\n\n          k ++;\n\n        }\n\n      }\n\n      this.count += 0.001;\n      positions.needsUpdate = true; \n      // console.log(this.wave.position)\n    }\n}","import  SceneSubject  from './SceneSubject'\nimport SceneManger from './SceneManager'\nimport { Wave } from './Wave';\n\nexport default class WaveScene{\n\n    private wave: Wave;\n\n    constructor(private sceneManager: SceneManger){\n        this.wave = new Wave(sceneManager);\n    }\n\n}","import SceneManager from './SceneManager';\nimport * as THREE from 'three';\n// import PortalScene from './portalScene';\n// import RotatingPotScene from './rotatingPot';\nimport WaveScene from './WaveScene';\n\nexport default containerElement => {\n  const canvas = createCanvas(document, containerElement);\n  const sceneManager = new SceneManager(canvas);\n\n\n\tvar camera = sceneManager.getCamera();\n  var plane = new THREE.Plane().setFromNormalAndCoplanarPoint(new THREE.Vector3(0, 0, 1), new THREE.Vector3(0, 0, 1));\n  var raycaster = new THREE.Raycaster();\n\tvar edge = new THREE.Vector2();\n  var edgePoint = new THREE.Vector3();\n\tconst createScene = new WaveScene(sceneManager);\n\tconst LEFT_EDGE = {x: -1, y: 0};\n\tconst RIGHT_EDGE = {x: 1, y: 0};\n  \n\n  \n\n\n bindEventListeners();\n  render();\n\t\n  function createCanvas(document, containerElement) {\n    const canvas = document.createElement('canvas');\n    containerElement.appendChild(canvas);\n    return canvas;\n  }\n\n  function bindEventListeners() {\n    window.addEventListener( 'resize', resizeCanvas, false );\n    resizeCanvas();\n  }\n  \n  function resizeCanvas() {\n    canvas.style.width = '100%';\n    canvas.style.height= '100%';\n    // canvas.width = canvas.offsetWidth;\n    // canvas.height = canvas.offsetHeight;\n    sceneManager.onWindowResize();\n  }\n\n  function render(time) {\n    requestAnimationFrame(render);\n    sceneManager.update();\n  }\n}","import React, { useEffect } from 'react';\nimport '../App.css'\nimport mainScene from '../threeJS/main'\n\nfunction CanvasScene (){\n  var threeContainer = null;\n  useEffect(()=>{\n\tmainScene(threeContainer)\n  }, [threeContainer])\n\n  return (\n\t  <div id=\"canvas-div\" ref={element => threeContainer = element}></div>\n  );\n}\n\nexport default CanvasScene\n","import { createMuiTheme } from '@material-ui/core/styles'; \n\nexport const getTheme = (type) => {\n    return createMuiTheme({\n    palette: {\n        // background: {\n        //     paper: fade('#fff',0.16),\n        //     default: '#ECE9E6'\n        // }\n       type: type,\n       background: {\n           default: type === 'dark' ? '#0f0f0f' : '#ECE9E6'\n       }\n    },\n    textGradient: type === 'dark' ? \n    // 'linear-gradient(90deg, rgba(226,19,194,1) 0%, rgba(129,200,237,1) 30%, rgba(50,240,39,1) 65%, rgba(255,201,4,1) 100%)' : \n    'radial-gradient(circle, rgba(63,94,251,1) 0%, rgba(252,70,107,1) 100%)' : \n    // 'linear-gradient(90deg, rgba(9,0,115,1) 0%, rgba(9,112,218,1) 33%, rgba(9,114,208,1) 62%, rgba(0,157,36,1) 93%)'\n    'radial-gradient(circle, rgba(3,29,164,1) 0%, rgba(136,1,28,1) 100%)'\n    ,\n    typography: {\n        fontFamily: [\n            '\"Roboto\", sans-serif',\n        ].join(','),\n        h1: {\n            fontFamily: \"'Major Mono Display', monospace\",\n            fontWeight: '700'\n        },\n        h5: {\n            fontFamily: \"'Major Mono Display', monospace\"\n        },\n        body1: {\n            fontFamily: '\"Lato\", sans-serif'\n        },\n        body2: {\n            fontFamily: '\"Lato\", sans-serif',\n            fontSize: '0.935rem'\n        }\n   },\n })\n}","import React from 'react';\nimport './App.css';\nimport { makeStyles, ThemeProvider } from \"@material-ui/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport CanvasScene from './components/canvas';\nimport { Divider, IconButton, useMediaQuery } from '@material-ui/core';\nimport { getTheme } from './theme'\nimport { AlternateEmailOutlined, LinkedIn, WorkOutline,  } from '@material-ui/icons';\nconst useStyles = makeStyles(theme => ({\n    rootCont:{\n        [theme.breakpoints.down('sm')]: {\n            paddingLeft:  '5px',\n            paddingRight:  '5px',\n        },\n    },\n    lowkey:{\n        position: \"absolute\",\n        right: '0',\n        top: '0',\n        fontSize: '5px'\n    },\n    gradientText: {\n        background: theme.textGradient,\n        WebkitBackgroundClip: 'text',\n        WebkitTextFillColor: 'transparent',\n    },\n    title: {\n        textAlign: 'center',\n        [theme.breakpoints.down('sm')]: {\n            fontSize: '10vw',\n        },\n        // -webkit-background-clip: text;\n\t    // -webkit-text-fill-color: transparent;\n    },\n\tbox: {\n\t\tmaxHeight: '100%',\n        overflow: 'auto',\n        background: theme.palette.background.default\n    },\n    icons: {\n        paddingTop: '0.5em',\n        display: 'flex',\n        gridTemplateColumns: '1fr 1fr 1fr 1fr',\n        gridGap: theme.spacing(5),\n        gap: theme.spacing(5),\n        background: theme.textGradient,\n        WebkitBackgroundClip: 'text',\n        WebkitTextFillColor: 'transparent',\n        [theme.breakpoints.down('sm')]: {\n            gridGap: theme.spacing(2),\n            gap: theme.spacing(2),\n        },\n    },\n\ttitleContainer: {\n        padding: '1em',\n        paddingTop: '3em',\n        [theme.breakpoints.down('sm')]: {\n            padding: '0',\n            paddingTop: '1em',\n        },\n        // position: 'fixed',\n        // top: '1em'\n\t},\n\timage: {\n\t\tbackgroundImage: \"url(https://source.unsplash.com/random)\",\n\t\tbackgroundRepeat: \"no-repeat\",\n\t\tbackgroundSize: \"cover\",\n\t\tbackgroundPosition: \"center\"\n\t},\n\tpaper: {\n\t\tmargin: theme.spacing(8, 4),\n\t\tdisplay: \"flex\",\n\t\tflexDirection: \"column\",\n\t\talignItems: \"center\"\n\t\t},\n\tlink: {\n\t\tmargin: 'auto'\n    },\n    titleBar: {\n        display: 'grid',\n        gridGap: '1em',\n        justifyItems: 'center',\n        gap: '1em',\n        textAlign: 'center'\n    },\n    workTitle:{\n        padding: '4px',\n    },\n    iconCont:{\n        fontSize: '1em'\n    }\n}));\n\n\nfunction Title(){\n    const classes = useStyles();\n    return(\n        <Box className={classes.titleContainer}>\n            <div className={classes.titleBar}>\n                    <Typography variant=\"h1\" className={`${classes.title} ${classes.gradientText}`}>shardool patel</Typography>\n                    <Divider/>\n                    <Typography variant=\"h5\">\n                       software engineer\n                    </Typography>\n                    <Typography variant=\"h6\" className={classes.workTitle}>\n                        Seeking opportunities to build empowering tech.\n                    </Typography>\n                    <Box className={classes.icons}>\n                        <div >\n                            <IconButton className={classes.iconCont} href='/Shardool_Resume.pdf' target=\"_blank\">\n                                <WorkOutline fontSize=\"large\"/>\n                            </IconButton>\n                            <Typography variant=\"h6\">Resume</Typography>\n                        </div>\n                        <div>\n                            <IconButton className={classes.iconCont} href='https://github.com/startsup' target=\"_blank\">\n                            <svg className=\"MuiSvgIcon-root MuiSvgIcon-fontSizeLarge\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M12 .3a12 12 0 0 0-3.8 23.4c.6.1.8-.3.8-.6v-2c-3.3.7-4-1.6-4-1.6-.6-1.4-1.4-1.8-1.4-1.8-1-.7.1-.7.1-.7 1.2 0 1.9 1.2 1.9 1.2 1 1.8 2.8 1.3 3.5 1 0-.8.4-1.3.7-1.6-2.7-.3-5.5-1.3-5.5-6 0-1.2.5-2.3 1.3-3.1-.2-.4-.6-1.6 0-3.2 0 0 1-.3 3.4 1.2a11.5 11.5 0 0 1 6 0c2.3-1.5 3.3-1.2 3.3-1.2.6 1.6.2 2.8 0 3.2.9.8 1.3 1.9 1.3 3.2 0 4.6-2.8 5.6-5.5 5.9.5.4.9 1 .9 2.2v3.3c0 .3.1.7.8.6A12 12 0 0 0 12 .3\"></path></svg>\n                            </IconButton>\n                            <Typography variant=\"h6\">Projects</Typography>\n                        </div>\n                        <div >\n                            <IconButton className={classes.iconCont} href='https://linkedin.com/in/sp97' target=\"_blank\">\n                                <LinkedIn fontSize=\"large\"/>\n                            </IconButton>\n                            <Typography variant=\"h6\">LinkedIn</Typography>\n                        </div>\n                        <div className={classes.gradientText} >\n                            <IconButton className={classes.iconCont} href='mailto:shardool_patel@hotmail.com'>\n                                <AlternateEmailOutlined fontSize=\"large\" />\n                            </IconButton>\n                            <Typography variant=\"h6\" >Contact</Typography>\n                        </div>\n                        {/* <Tooltip title=\"About Me\">\n                            <a href=\"#Me\">\n                                <Icon>person_outline</Icon>\n                            </a>\n                        </Tooltip>\n                        <Tooltip title=\"Work Experience\">\n                            <a href=\"#Work\">\n                                <Icon>work_outline</Icon>\n                            </a>\n                        </Tooltip>\n                        <Tooltip title=\"Projects\">\n                            <a href=\"#Projects\">\n                            <Icon className=\"material-icons-outlined\">palette</Icon>\n                            </a>\n                        </Tooltip> */}\n                        \n                            {/* <a href='/Shardool_Resume.pdf'>\n                            <Icon className=\"material-icons-outlined\">save_alt</Icon>\n                            </a> */}\n                    </Box>\n\n            </div>\n        </Box>\n    )\n\n}\nfunction Main(){\n    const classes = useStyles()\n    return(\n        <Container className={classes.rootCont}>\n            <Title></Title>\n        </Container>\n    )\n}\nexport default function Home(props){\n    const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n\n    const theme = React.useMemo(\n      () => getTheme(prefersDarkMode ? 'dark' : 'light'),\n      [prefersDarkMode],\n    );\n\n    return (\n        <ThemeProvider theme={theme}>\n                <CssBaseline />\n                <CanvasScene/>\n                <Main/>\n                \n        </ThemeProvider>\n    )\n\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Home from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Home />\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}